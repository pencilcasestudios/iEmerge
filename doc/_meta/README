#----------------------------------------------------------------------
# Development setup
# Setting up the development environment after a fresh repository clone
#----------------------------------------------------------------------
cd ~/Code/iEmerge
cp config/examples/database/database.yml config # Setup the database
cp config/examples/config/config.yml config # Setup the configuration files
cp config/examples/deploy.rb config # Setup the capistrano deployment recipe
cp config/examples/deploy/*.rb config/deploy # Setup deployment stage configuration

# Link externalised assets:
cd ~/Code/iEmerge/app/assets
ln -nfs ~/Dropbox/iEmerge\ Office/Repositories/Images/ images
ln -nfs ~/Dropbox/iEmerge\ Office/Repositories/PDFs/ pdfs

# Set up the hosts (/etc/hosts)
127.0.0.1	iemerge.dev		www.iemerge.dev

# Test with
ping iemerge.dev

# Setup deployment references:
git remote add virtual deploy@rails.vm:/var/Repositories/Git/iEmerge.git
git remote add staging deploy@asher.vps:/var/Repositories/Git/iEmerge.git
git remote add production deploy@gad.vps:/var/Repositories/Git/iEmerge.git




# Tests
#======
# Git
git push virtual
git push staging
git push production

# Install gem bundles
cd ~/Code/iEmerge
bundle install


# Update gem bundles
cd ~/Code/iEmerge
bundle update
gem cleanup

# Guard for testing
cd ~/Code/iEmerge
rake db:drop
rake db:setup
rake db:test:prepare
bundle exec guard




# Running the Application
#========================
cd ~/Code/iEmerge
rails server # In one terminal window - to run the application

#cd ~/Code/iEmerge
#rake jobs:work # In another terminal window - to run delayed job

cd ~/Code/iEmerge
rails console # In another terminal window - to manage administrators




# Gem management
#===============
# MAINTAIN GEM BUNDLE
bundle update
gem cleanup

# DELETE ALL INSTALLED GEMS
gem list | cut -d" " -f1 | xargs gem uninstall -aIx




# Continuous Application Deployment
#==================================
# VIRTUAL
cd ~/Code/iEmerge
git checkout master
git merge dev
git push
git push virtual
cap virtual deploy
git tag "`date +virtual_%Y-%m-%d_%H%M%S`"

# STAGING
cd ~/Code/iEmerge
git checkout master
git merge dev
git push
git push staging
cap staging deploy
git tag "`date +staging_%m-%d_%H%M%S`"

# PRODUCTION
cd ~/Code/iEmerge
git checkout master
git merge dev
git push
git push production
cap production deploy
git tag "`date +production_%Y-%m-%d_%H%M%S`"



















#----------------------------------------------------------------------
# Virtual setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the # mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@rails.vm
ssh vladimir@rails.vm

# Set up the hosts (/etc/hosts):
ssh vladimir@rails.vm

# Make sure the following line is in /etc/hosts:
# 127.0.0.1 rails.vm

# Check that SSH "loops back" on the virtual machine (host key verification):
# On the local development machine
ssh deploy@rails.vm

# On the virtual machine
ssh deploy@rails.vm

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@rails.vm


# Set up the Repository folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories

# Create the Git repository:
ssh deploy@rails.vm
cd /var/Repositories/Git/
mkdir iEmerge.git
cd iEmerge.git
git init --bare

# Push to the Git repository:
# From the development machine:
cd ~/Code/iEmerge
git remote add virtual deploy@rails.vm:/var/Repositories/Git/iEmerge.git
git push virtual master # or git push virtual


# Set up the Apps folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Create the AssetsVault folder
ssh vladimir@rails.vm
sudo mkdir -p /var/AssetsVault
sudo chown deploy:deploy /var/AssetsVault


# Configure nginx
# On the development machine
cd ~/Code/iEmerge/config/examples/nginx
scp nginx.iemerge.virtual.conf vladimir@rails.vm:~/iemerge.virtual.conf


# On the virtual machine
# Set up the nginx configuration
ssh vladimir@rails.vm
sudo mv ~/iemerge.virtual.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/iemerge.virtual.conf /etc/nginx/sites-enabled/iemerge.virtual


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p iEmerge
cd iEmerge
sudo openssl genrsa -des3 -out iemerge.virtual.key 1024

# pass phrase: iemerge

sudo openssl req -new -key iemerge.virtual.key -out iemerge.virtual.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: iEmerge Agency
# Orgnisational Unit Name: <Blank>
# Common Name: iemerge.virtual.
# Email: itsupport@pencilcasestudios.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp iemerge.virtual.key iemerge.virtual.key.original
sudo openssl rsa -in iemerge.virtual.key.original -out iemerge.virtual.key

sudo openssl x509 -req -days 365 -in iemerge.virtual.csr -signkey iemerge.virtual.key -out iemerge.virtual.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh vladimir@rails.vm
mysql -u root -p
create user 'iemerge'@'localhost' identified by 'VirtualiEmergePassword';
grant all on iEmerge_virtual.* to 'iemerge'@'localhost';
grant all on iEmerge_virtual_development.* to 'iemerge'@'localhost';
grant all on iEmerge_virtual_test.* to 'iemerge'@'localhost';

# Setup the MariaDB database:
mysql -u iemerge -p
create database iEmerge_virtual;
create database iEmerge_virtual_development;
create database iEmerge_virtual_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Code/iEmerge/config/examples/monit
scp delayed_job.iemerge.virtual.monitrc vladimir@rails.vm:~
cd ~/Code/iEmerge
ssh vladimir@rails.vm

# From the virtual machine
sudo mv ~/delayed_job.iemerge.virtual.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Code/iEmerge/config/examples/config
scp config.virtual.yml deploy@rails.vm:~/config.yml
cd ~/Code/iEmerge/config/examples/database
scp database.virtual.yml deploy@rails.vm:~/database.yml
cd ~/Code/iEmerge/
ssh deploy@rails.vm

# From the virtual machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/iEmerge/virtual
mv database.yml ~/Projects/Configurations/iEmerge/virtual/
mv config.yml ~/Projects/Configurations/iEmerge/virtual/
exit

# From the development machine
# Capistrano steps for initial deployment
# VIRTUAL MACHINE DEPLOYMENT
cd ~/Code/iEmerge/
git checkout master
git merge dev
git push
git push virtual # May need to 'git push virtual master'
cap virtual git:check
cap virtual deploy:setup_asset_vault
cap virtual deploy:check # Update configuration files and create the database after this

# From the virtual machine (as the deploy user)
# After running cap virtual deploy:check
ssh deploy@rails.vm
cd ~/Projects/Configurations/iEmerge/virtual
cp *.yml /var/Apps/iEmerge/virtual/shared/config/

cap virtual deploy:check
cap virtual deploy


# After deploying the app
# From the virtual machine
sudo service monit reload



















#----------------------------------------------------------------------
# Staging setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the # mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@asher.vps
ssh silumesii@asher.vps

# Set up the hosts (/etc/hosts):
ssh silumesii@asher.vps

# Make sure the following line is in /etc/hosts:
# 127.0.0.1 asher.vps

# Check that SSH "loops back" on the staging machine (host key verification):
# On the local development machine
ssh deploy@asher.vps

# On the staging machine
ssh deploy@asher.vps

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@asher.vps


# Set up the Repository folder
ssh silumesii@asher.vps
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories

# Create the Git repository:
ssh deploy@asher.vps
cd /var/Repositories/Git/
mkdir iEmerge.git
cd iEmerge.git
git init --bare

# Push to the Git repository:
# From the development machine:
cd ~/Code/iEmerge
git remote add staging deploy@asher.vps:/var/Repositories/Git/iEmerge.git
git push staging master # or git push staging


# Set up the Apps folder
ssh vladimir@rails.vm
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Create the AssetsVault folder
ssh vladimir@rails.vm
sudo mkdir -p /var/AssetsVault
sudo chown deploy:deploy /var/AssetsVault


# Configure nginx
# On the development machine
cd ~/Code/iEmerge/config/examples/nginx
scp nginx.iemerge.clientcase.net.conf silumesii@asher.vps:~/iemerge.clientcase.net.conf


# On the staging machine
# Set up the nginx configuration
ssh silumesii@asher.vps
sudo mv ~/iemerge.clientcase.net.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/iemerge.clientcase.net.conf /etc/nginx/sites-enabled/iemerge.clientcase.net


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p iEmerge
cd iEmerge
sudo openssl genrsa -des3 -out iemerge.clientcase.net.key 1024

# pass phrase: iemerge

sudo openssl req -new -key iemerge.clientcase.net.key -out iemerge.clientcase.net.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: iEmerge Agency
# Orgnisational Unit Name: <Blank>
# Common Name: iemerge.clientcase.net.
# Email: itsupport@pencilcasestudios.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp iemerge.clientcase.net.key iemerge.clientcase.net.key.original
sudo openssl rsa -in iemerge.clientcase.net.key.original -out iemerge.clientcase.net.key

sudo openssl x509 -req -days 365 -in iemerge.clientcase.net.csr -signkey iemerge.clientcase.net.key -out iemerge.clientcase.net.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh silumesii@asher.vps
mysql -u root -p
create user 'iemerge'@'localhost' identified by 'StagingiEmergePassword';
grant all on iEmerge_staging.* to 'iemerge'@'localhost';
grant all on iEmerge_staging_development.* to 'iemerge'@'localhost';
grant all on iEmerge_staging_test.* to 'iemerge'@'localhost';

# Setup the MariaDB database:
ssh deploy@asher.vps
mysql -u iemerge -p
create database iEmerge_staging;
create database iEmerge_staging_development;
create database iEmerge_staging_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Code/iEmerge/config/examples/monit
scp delayed_job.iemerge.clientcase.net.monitrc silumesii@asher.vps:~
cd ~/Code/iEmerge

# From the staging machine
ssh silumesii@asher.vps
sudo mv ~/delayed_job.iemerge.clientcase.net.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Code/iEmerge/config/examples/config
scp config.staging.yml deploy@asher.vps:~/config.yml
cd ~/Code/iEmerge/config/examples/database
scp database.staging.yml deploy@asher.vps:~/database.yml
cd ~/Code/iEmerge/
ssh deploy@asher.vps

# From the staging machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/iEmerge/staging
mv database.yml ~/Projects/Configurations/iEmerge/staging/
mv config.yml ~/Projects/Configurations/iEmerge/staging/
# After this, update:
# 1. the production database password
# 2. the production email password

# From the development machine
# Capistrano steps for initial deployment
# STAGING MACHINE DEPLOYMENT
cd ~/Code/iEmerge/
git checkout master
git merge dev
git push
git push staging # May need to 'git push staging master'
cap staging git:check
cap staging deploy:setup_asset_vault
cap staging deploy:check # Update configuration files and create the database after this

# From the staging machine (as the deploy user)
# After running cap staging deploy:check
ssh deploy@rails.vm
cd ~/Projects/Configurations/iEmerge/staging
cp *.yml /var/Apps/iEmerge/staging/shared/config/

cap staging deploy:check
cap staging deploy


# After deploying the app
# From the staging machine
sudo service monit reload



















#----------------------------------------------------------------------
# Production setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the # mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@gad.vps
ssh silumesii@gad.vps

# Set up the hosts (/etc/hosts):
ssh silumesii@gad.vps

# Make sure the following line is in /etc/hosts:
# 127.0.0.1 gad.vps

# Check that SSH "loops back" on the production machine (host key verification):
# On the local development machine
ssh deploy@gad.vps

# On the production machine
ssh deploy@gad.vps

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@gad.vps


# Set up the Repository folder
ssh silumesii@gad.vps
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories

# Create the Git repository:
ssh deploy@gad.vps
cd /var/Repositories/Git/
mkdir iEmerge.git
cd iEmerge.git
git init --bare

# Push to the Git repository:
# From the development machine:
cd ~/Code/iEmerge
git remote add production deploy@gad.vps:/var/Repositories/Git/iEmerge.git
git push production # or git push production master


# Set up the Apps folder
ssh silumesii@gad.vps
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Create the AssetsVault folder
ssh silumesii@gad.vps
sudo mkdir -p /var/AssetsVault
sudo chown deploy:deploy /var/AssetsVault


# Configure nginx
# On the development machine
cd ~/Code/iEmerge/config/examples/nginx
scp nginx.iemergeagency.com.conf silumesii@gad.vps:~/iemergeagency.com.conf


# On the production machine
# Set up the nginx configuration
ssh silumesii@gad.vps
sudo mv ~/iemergeagency.com.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/iemergeagency.com.conf /etc/nginx/sites-enabled/iemergeagency.com


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p iEmerge
cd iEmerge
sudo openssl genrsa -des3 -out iemergeagency.com.key 1024

# pass phrase: iemerge

sudo openssl req -new -key iemergeagency.com.key -out iemergeagency.com.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: iEmerge Agency
# Orgnisational Unit Name: <Blank>
# Common Name: iemergeagency.com.
# Email: itsupport@pencilcasestudios.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp iemergeagency.com.key iemergeagency.com.key.original
sudo openssl rsa -in iemergeagency.com.key.original -out iemergeagency.com.key
sudo openssl x509 -req -days 365 -in iemergeagency.com.csr -signkey iemergeagency.com.key -out iemergeagency.com.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh silumesii@gad.vps
mysql -u root -p
create user 'iemerge'@'localhost' identified by 'ProductioniEmergePassword';
grant all on iEmerge_production.* to 'iemerge'@'localhost';
grant all on iEmerge_production_development.* to 'iemerge'@'localhost';
grant all on iEmerge_production_test.* to 'iemerge'@'localhost';

# Setup the MariaDB database:
ssh deploy@gad.vps
mysql -u iemerge -p
create database iEmerge_production;
create database iEmerge_production_development;
create database iEmerge_production_test;


# Setup the Monit scripts:
# From the development machine
cd ~/Code/iEmerge/config/examples/monit
scp delayed_job.iemergeagency.com.monitrc silumesii@gad.vps:~
cd ~/Code/iEmerge
ssh silumesii@gad.vps

# From the production machine
sudo mv ~/delayed_job.iemergeagency.com.monitrc /etc/monit/conf.d/
sudo service monit syntax


# Setup the YAML configuration files:
# From the development machine
cd ~/Code/iEmerge/config/examples/config
scp config.production.yml deploy@gad.vps:~/config.yml
cd ~/Code/iEmerge/config/examples/database
scp database.production.yml deploy@gad.vps:~/database.yml
cd ~/Code/iEmerge/
ssh deploy@gad.vps

# From the production machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/iEmerge/production
mv database.yml ~/Projects/Configurations/iEmerge/production/
mv config.yml ~/Projects/Configurations/iEmerge/production/
# After this, update:
# 1. the production database password
# 2. the production email password

# From the development machine
# Capistrano steps for initial deployment
# PRODUCTION MACHINE DEPLOYMENT
cd ~/Code/iEmerge
git checkout master
git merge dev
git push
git push production # May need to 'git push production master'
cap production git:check
cap production rvm1:install:rvm
cap production deploy:setup_asset_vault
cap production deploy:check # Update configuration files and create the database after this

# From the production machine (as the deploy user)
# After running cap production deploy:check
ssh deploy@gad.vps
cd ~/Projects/Configurations/iEmerge/production
cp *.yml /var/Apps/iEmerge/production/shared/config/

cap production deploy:check
cap production deploy


# After deploying the app
# From the production machine
sudo service monit reload



















# Hints
#======

# gzip
#-----
gzip database.sql


# ImageMagick
#------------
convert -resize 350x525 -gravity center -extent 350x525 brochure_advertisement_cover.png tmp.png


# MariaDB
#--------
# Database export:
# The EXTENSION can be something like "sql"
mysqldump -u USERNAME -p DATABASE_NAME > ~/OUTPUTFILE.EXTENSION

# Database import:
mysql -u USERNAME -p DATABASE_NAME < BACKUPFILE

# Set or update user password
set password for 'username'@'localhost' = password('cleartext password');


# Ruby
#-----
# Working with gemsets:
rvm @global do gem update
rvm @global do gem cleanup









# Links
#======
http://gorails.com/deploy/ubuntu/12.04
http://stackoverflow.com/questions/3031412/how-to-export-a-mysql-database-using-command-prompt
http://webcheatsheet.com/SQL/mysql_backup_restore.php
http://www.modrails.com/documentation/Users%20guide%20Nginx.html (Note the "RVM helper tool" section)
https://dev.mysql.com/doc/refman/5.0/en/set-password.html
https://dev.mysql.com/doc/refman/5.1/en/mysqldump.html
https://rvm.io/gemsets/global
